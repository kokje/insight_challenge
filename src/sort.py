import sys
import os
import ConfigParser

class Sort:
	""" This class combines the sorted out generated by each process per shard """
	def __init__(self, path, sortedoutputfile):
		self.path = path
		self.sortedoutputfile = sortedoutputfile
		self.hashmap = {}

	def sortIntermediates(self):
		""" Combine intermediate output files generated by individual counter processes """
		for inputfile in os.listdir(self.path):
			if inputfile.endswith('.txt'):
				try:
					f = open(os.path.join(self.path,inputfile), 'r')
					for line in f:
						words = line.split()
						if self.hashmap.has_key(words[0]):
							self.hashmap[words[0]] += int(words[1])
						else:
							self.hashmap[words[0]] = int(words[1])
					f.close() 
				except IOError:
					print 'Cannot open input file', os.path.join(self.path,inputfile)
				self.writeOutput()

	def writeOutput(self):
		""" Sort and write output of each shard to a single file """
		try:		
			f = open(os.path.join(self.path,self.sortedoutputfile), 'w')
			for entry in sorted(self.hashmap):
				f.write(entry+' '+str(self.hashmap[entry]) +'\n')
			f.close()
		except IOError:
			print 'Error writing to output file', os.path.join(self.path,self.sortedoutputfile) 

if __name__=='__main__':
	if len(sys.argv) != 3:
		print "Insufficient input parameters"
	sorter = Sort(sys.argv[1], sys.argv[2])
	sorter.sortIntermediates()